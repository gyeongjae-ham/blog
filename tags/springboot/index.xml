<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SpringBoot on 안녕루카</title>
    <link>https://hiyee-gj.github.io/blog/tags/springboot/</link>
    <description>Recent content in SpringBoot on 안녕루카</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 19 Apr 2023 20:42:57 +0900</lastBuildDate><atom:link href="https://hiyee-gj.github.io/blog/tags/springboot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringBoot JPA로 Entity 클래스 구성하기</title>
      <link>https://hiyee-gj.github.io/blog/posts/20230419_jpa%EB%A1%9C_entity/</link>
      <pubDate>Wed, 19 Apr 2023 20:42:57 +0900</pubDate>
      
      <guid>https://hiyee-gj.github.io/blog/posts/20230419_jpa%EB%A1%9C_entity/</guid>
      <description>자주 사용하다보면 익숙하게 익혀지겠지만, 그래도 기록으로 남겨서 빠르게 와서 복습할 수 있도록 자세하게 남겨보도록 하려한다.
package com.fastcampus.springboard.domain; import lombok.Getter; import lombok.Setter; import lombok.ToString; import org.springframework.data.annotation.CreatedBy; import org.springframework.data.annotation.CreatedDate; import org.springframework.data.annotation.LastModifiedBy; import org.springframework.data.annotation.LastModifiedDate; import javax.persistence.*; import java.time.LocalDateTime; import java.util.LinkedHashSet; import java.util.Objects; import java.util.Set; @Getter // 전체 레벨에서는 Setter를 설정하지 말자(데이터 보호를 위해서 필요한 값만) @ToString // 쉽게 볼 수 있도록 @Table(indexes = { // 빠르게 검색할 수 있도록 인덱스 설정 @Index(columnList = &amp;#34;title&amp;#34;), @Index(columnList = &amp;#34;hashtag&amp;#34;), @Index(columnList = &amp;#34;createdAt&amp;#34;), @Index(columnList = &amp;#34;createdBy&amp;#34;), }) // Entity에도 Auditing을 사용한다는 설정을 해줘야 한다.</description>
    </item>
    
    <item>
      <title>SpringBoot Actuator</title>
      <link>https://hiyee-gj.github.io/blog/posts/20230419_spring_actuator/</link>
      <pubDate>Wed, 19 Apr 2023 13:12:04 +0900</pubDate>
      
      <guid>https://hiyee-gj.github.io/blog/posts/20230419_spring_actuator/</guid>
      <description>웹 개발을 하면서 어플리케이션을 만들 때 서비스 로직뿐만 아니라 사용자의 정보라던지 어떤 경로로 요청이 들어오는지 등 많은 것을 고려하고 개발해야 한다. spring-boot-actuator라는 모듈은 애플리케이션 상태를 종합적으로 정리해서 보여준다.
Spring Boot Actuator 간단히 말하자면 Spring Boot Application의 상태를 관리해준다.
Spring Boot Application의 상태정보(health, properties, beans, 구동된 AutoConfiguration 목록 등)을 다룰 수 있도록 자동으로 설정 각종 추상화 클래스(HealthIndicator 등)을 제공하여, 상태 정보를 변경할 수 있도록 Service 제공 노출할 항목 설정 # Actuator 감춰져 있는 모든 endpoint 정보 표출하도록 설정 management.</description>
    </item>
    
  </channel>
</rss>
